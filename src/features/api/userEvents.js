import octokit_api from "../../lib/github-api-client"

export async function fetchUserEvents(username, type = "") {
  const req_str = `GET /users/${username}/events`
  const response = await octokit_api.request(req_str)

  if (type) {
    return response.data.filter(event => event.type === type);
  }

  return response.data
}

export async function fetchCommitsFromEvents(events) {
  // First, extract all commits from events
  const commitsPromises = events.map(event => event.payload.commits);
  // Wait for all promises to resolve
  const allCommitsArrays = await Promise.all(commitsPromises);
  // Flatten the array of arrays into a single array of commits
  const allCommits = allCommitsArrays.flat();

  // Now fetch each commit URL
  const commitUrlPromises = allCommits.map(commit => {
    return octokit_api.request(commit.url);
  });
  // Wait for all URL requests to complete
  const commitResponses = await Promise.all(commitUrlPromises);

  const commitData = commitResponses.map(response => response.data)

  return commitData;
}

//TODO: this was generated by ai, recheck
// also make it so it also fetches the urls
async function fetchTreeUrlParentUrlPair(commitData) {
  // Map each commit to an object containing its tree URL and parent URL
  const urlPairs = commitData.map(commit => {
    // Get tree URL
    const treeUrl = commit.tree.url;

    // Get parent URL (first parent if there are multiple)
    // Some commits might not have parents (e.g., initial commits)
    const parentUrl = commit.parents.length > 0 ? commit.parents[0].url : null;

    return {
      treeUrl: treeUrl,
      parentUrl: parentUrl
    };
  });

  return urlPairs;
}
